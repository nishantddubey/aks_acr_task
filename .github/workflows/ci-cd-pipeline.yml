name: CI/CD Pipeline for AKS

on:
  push:
    branches:
      - main

env:
  ACR_NAME: myacrregistry12345
  ACR_LOGIN_SERVER: myacrregistry12345.azurecr.io
  IMAGE_NAME: html-app
  AKS_RESOURCE_GROUP: aks-resource-group
  AKS_CLUSTER_NAME: my-aks-cluster
  NAMESPACE: default

jobs:
  provision-infra:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.6 # You can specify the desired Terraform version here

    - name: Initialize Terraform
      working-directory: terraform
      run: terraform init

    - name: Validate Terraform
      working-directory: terraform
      run: terraform validate

    - name: Plan Terraform
      working-directory: terraform
      run: terraform plan -out=tfplan

    - name: Apply Terraform
      working-directory: terraform
      run: terraform apply -auto-approve tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: provision-infra

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_SECRET }}

    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} -f html-app/Dockerfile html-app
        docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Get AKS credentials
      run: az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }}

    - name: Deploy to AKS
      run: |
        # Update the deployment YAML with the new image tag
        sed -i 's@myacrregistry12345.azurecr.io/html-app:latest@${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}@' k8s/k8s-deployment.yaml
        
        # Apply the Kubernetes deployment and service
        kubectl apply -f k8s/k8s-deployment.yaml
        kubectl apply -f k8s/k8s-service.yaml
